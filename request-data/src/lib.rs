// Copyright 2023 Salesforce, Inc. All rights reserved.
mod generated;

use anyhow::{anyhow, Result};

use pdk::hl::*;

use crate::generated::config::Config;


async fn request_filter(request_state: RequestState, _config: &Config) -> Flow<String>{
    let _headers_state = request_state.into_headers_state().await;

    let example_data = "example-data-value".to_string();
    // Indicate that the request should continue normally and forward the 'example_data' to the response filter.
    Flow::Continue(example_data)
}

async fn response_filter(response_state: ResponseState, request_data: RequestData<String>, _config: &Config) {
    let _headers_state = response_state.into_headers_state().await;

    // Check the data forwarded by the request_filter.
    if let RequestData::Continue(_example_data) = request_data {
        // use the data
    }
}

#[entrypoint]
async fn configure(launcher: Launcher, Configuration(bytes): Configuration) -> Result<()> {
    let config: Config = serde_json::from_slice(&bytes).map_err(|err| {
        anyhow!(
            "Failed to parse configuration '{}'. Cause: {}",
            String::from_utf8_lossy(&bytes),
            err
        )
    })?;

    let filter = on_request(|rs| request_filter(rs, &config))
        // Inject the request data generated by the on_request filter to the on_response filter
        .on_response(|rs, request_data| response_filter(rs, request_data, &config));
    launcher.launch(filter).await?;
    Ok(())
}
